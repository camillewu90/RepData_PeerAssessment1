#reading features table:
features<-read.table("./data/UCI HAR Dataset/features.txt")
##reading activity lables table:
activityLabels<-read.table("./data/UCI HAR Dataset/activity_labels.txt")
## assinging column names for the tables:
colnames(x_train)<-features[,2]
colnames(y_train)<-"activityid"
colnames(subject_train)<-"subjectid"
colnames(x_test)<-features[,2]
colnames(y_test)<-"activityid"
colnames(subject_test)<-"subjectid"
colnames(activityLabels)<-c("activityid","activitylabel")
##merging all data in one set
data_train<-cbind(subject_train,y_train,x_train)
data_test<-cbind(subject_test,y_test,x_test)
bigdata<-rbind(data_train,data_test)
## step 3 Extracts only the measurements on the mean and standard deviation for each measurement.
## reading column names:
colNames<-colnames(bigdata)
## creating logical vector indexing subjectid, activityid, mean and std
columnindex<-grepl("subjectid|activityid|mean\\(\\)|std\\(\\)",colNames)
## subset the required columns plus subjectid, and activityid in the big dataset
selectedData<-bigdata[,columnindex]
## step 4 Uses descriptive activity names to name the activities in the data set
selectedData$activityid<-activityLabels[selectedData$activityid,2]
## step 5  Appropriately labels the data set with descriptive variable names.
names(selectedData)[2]<-"activity"
names(selectedData)<-gsub("Acc","Accelerometer",names(selectedData))
names(selectedData)<-gsub("Gyro","Gyroscope",names(selectedData))
names(selectedData)<-gsub("^t","Time",names(selectedData))
names(selectedData)<-gsub("Mag","Magnitude",names(selectedData))
names(selectedData)<-gsub("^f","Frequency",names(selectedData))
names(selectedData)<-gsub("BodyBody","Body",names(selectedData))
names(selectedData)<-gsub("tBody","TimeBody",names(selectedData))
names(selectedData)<-gsub("-mean\\(\\)","Mean",names(selectedData))
names(selectedData)<-gsub("-std\\(\\)","STD",names(selectedData))
names(selectedData)<-gsub("angle","Angle",names(selectedData))
names(selectedData)<-gsub("gravity","Gravity",names(selectedData))
## Step 6 From the data set in step 4, creates a second, independent
## tidy data set with the average of each variable for each activity and each subject.
data2<-selectedData %>%
group_by(subjectid,activity) %>%
summarize_all(list(mean=mean))
write.table(data2,"./data/UCI HAR Dataset/seconddata.txt",row.names=F)
library(dplyr)
data2<-selectedData %>%
group_by(subjectid,activity) %>%
summarize_all(list(mean=mean))
write.table(data2,"./data/UCI HAR Dataset/seconddata.txt",row.names=F)
read.csv("./data/UCI HAR Dataset/seconddata.txt")
read.table("./data/UCI HAR Dataset/seconddata.txt")
data3<-read.table("./data/UCI HAR Dataset/seconddata.txt")
View(data3)
data3<-read.table("./data/UCI HAR Dataset/seconddata.txt",col.names=T)
View(data3)
data3<-read.table("./data/UCI HAR Dataset/seconddata.txt",header=T)
View(data3)
install.packages("dataMaid")
library(dataMaid)
makeCodebook(selectedData)
names(selectedData)
View(selectedData)
View(activityLabels)
selectedData$activityid
x_train<-read.table("./data/UCI HAR Dataset/train/x_train.txt")
y_train<-read.table("./data/UCI HAR Dataset/train/y_train.txt")
subject_train<-read.table("./data/UCI HAR Dataset/train/subject_train.txt")
## reading test tables:
x_test<-read.table("./data/UCI HAR Dataset/test/X_test.txt")
y_test<-read.table("./data/UCI HAR Dataset/test/y_test.txt")
subject_test<-read.table("./data/UCI HAR Dataset/test/subject_test.txt")
#reading features table:
features<-read.table("./data/UCI HAR Dataset/features.txt")
##reading activity lables table:
activityLabels<-read.table("./data/UCI HAR Dataset/activity_labels.txt")
## assinging column names for the tables:
colnames(x_train)<-features[,2]
colnames(y_train)<-"activityid"
colnames(subject_train)<-"subjectid"
colnames(x_test)<-features[,2]
colnames(y_test)<-"activityid"
colnames(subject_test)<-"subjectid"
colnames(activityLabels)<-c("activityid","activitylabel")
##merging all data in one set
data_train<-cbind(subject_train,y_train,x_train)
data_test<-cbind(subject_test,y_test,x_test)
bigdata<-rbind(data_train,data_test)
## step 3 Extracts only the measurements on the mean and standard deviation for each measurement.
## reading column names:
colNames<-colnames(bigdata)
## creating logical vector indexing subjectid, activityid, mean and std
columnindex<-grepl("subjectid|activityid|mean\\(\\)|std\\(\\)",colNames)
## subset the required columns plus subjectid, and activityid in the big dataset
selectedData<-bigdata[,columnindex]
selectedData$activityid
View(activityLabels)
install.packages("tibble")
library(tibble)
?add_column
View(bigdata)
View(selectedData)
x_train<-read.table("./data/UCI HAR Dataset/train/x_train.txt")
y_train<-read.table("./data/UCI HAR Dataset/train/y_train.txt")
subject_train<-read.table("./data/UCI HAR Dataset/train/subject_train.txt")
## reading test tables:
x_test<-read.table("./data/UCI HAR Dataset/test/X_test.txt")
y_test<-read.table("./data/UCI HAR Dataset/test/y_test.txt")
subject_test<-read.table("./data/UCI HAR Dataset/test/subject_test.txt")
#reading features table:
features<-read.table("./data/UCI HAR Dataset/features.txt")
##reading activity lables table:
activityLabels<-read.table("./data/UCI HAR Dataset/activity_labels.txt")
## assinging column names for the tables:
colnames(x_train)<-features[,2]
colnames(y_train)<-"activityid"
colnames(subject_train)<-"subjectid"
colnames(x_test)<-features[,2]
colnames(y_test)<-"activityid"
colnames(subject_test)<-"subjectid"
colnames(activityLabels)<-c("activityid","activitylabel")
##merging all data in one set
data_train<-cbind(subject_train,y_train,x_train)
data_test<-cbind(subject_test,y_test,x_test)
bigdata<-rbind(data_train,data_test)
## step 3 Extracts only the measurements on the mean and standard deviation for each measurement.
## reading column names:
colNames<-colnames(bigdata)
## creating logical vector indexing subjectid, activityid, mean and std
columnindex<-grepl("subjectid|activityid|mean\\(\\)|std\\(\\)",colNames)
## subset the required columns plus subjectid, and activityid in the big dataset
selectedData<-bigdata[,columnindex]
## step 4 Uses descriptive activity names to name the activities in the data set
selectedData$activityid<-activityLabels[selectedData$activityid,2]
## step 5  Appropriately labels the data set with descriptive variable names.
names(selectedData)[2]<-"activity"
names(selectedData)<-gsub("Acc","Accelerometer",names(selectedData))
names(selectedData)<-gsub("Gyro","Gyroscope",names(selectedData))
names(selectedData)<-gsub("^t","Time",names(selectedData))
names(selectedData)<-gsub("Mag","Magnitude",names(selectedData))
names(selectedData)<-gsub("^f","Frequency",names(selectedData))
names(selectedData)<-gsub("BodyBody","Body",names(selectedData))
names(selectedData)<-gsub("tBody","TimeBody",names(selectedData))
names(selectedData)<-gsub("-mean\\(\\)","Mean",names(selectedData))
names(selectedData)<-gsub("-std\\(\\)","STD",names(selectedData))
names(selectedData)<-gsub("angle","Angle",names(selectedData))
names(selectedData)<-gsub("gravity","Gravity",names(selectedData))
write.table(selectedData,"./data/UCI HAR Dataset/tidydata.txt",row.names=F)
## Step 6 From the data set in step 4, creates a second, independent
## tidy data set with the average of each variable for each activity and each subject.
data2<-selectedData %>%
group_by(subjectid,activity) %>%
summarize_all(list(mean=mean))
write.table(data2,"./data/UCI HAR Dataset/seconddata.txt",row.names=F)
t(names(selectedData))
t<-t(names(selectedData))
data.frame(name=names(selectedData))
a<-data.frame(name=names(selectedData))
View(a)
write.table(a,"./data/columnnames.txt",row.names=F)
a<-as.numeric(a$name)
View(data2)
b<-data.frame(name=colnames(data2))
write.table(b,"./data/columnnames2.txt.row.names=F")
write.table(b,"./data/columnnames2.txt",row.names=F)
library(dplyr)
## step1. downloading and unzipping dataset
if(!file.exists("./data")){dir.create("./data")}
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip",
destfile="./data/data.zip",mode="wb")
unzip("./data/data.zip",exdir="./data")
## step2. reading and merging the training and the test sets to create one data set.
## reading training tables:
x_train<-read.table("./data/UCI HAR Dataset/train/x_train.txt")
y_train<-read.table("./data/UCI HAR Dataset/train/y_train.txt")
subject_train<-read.table("./data/UCI HAR Dataset/train/subject_train.txt")
## reading test tables:
x_test<-read.table("./data/UCI HAR Dataset/test/X_test.txt")
y_test<-read.table("./data/UCI HAR Dataset/test/y_test.txt")
subject_test<-read.table("./data/UCI HAR Dataset/test/subject_test.txt")
#reading features table:
features<-read.table("./data/UCI HAR Dataset/features.txt")
##reading activity lables table:
activityLabels<-read.table("./data/UCI HAR Dataset/activity_labels.txt")
## assinging column names for the tables:
colnames(x_train)<-features[,2]
colnames(y_train)<-"activityid"
colnames(subject_train)<-"subjectid"
colnames(x_test)<-features[,2]
colnames(y_test)<-"activityid"
colnames(subject_test)<-"subjectid"
colnames(activityLabels)<-c("activityid","activitylabel")
##merging all data in one set
data_train<-cbind(subject_train,y_train,x_train)
data_test<-cbind(subject_test,y_test,x_test)
bigdata<-rbind(data_train,data_test)
## step 3 Extracts only the measurements on the mean and standard deviation for each measurement.
## reading column names:
colNames<-colnames(bigdata)
## creating logical vector indexing subjectid, activityid, mean and std
columnindex<-grepl("subjectid|activityid|mean\\(\\)|std\\(\\)",colNames)
## subset the required columns plus subjectid, and activityid in the big dataset
selectedData<-bigdata[,columnindex]
## step 4 Uses descriptive activity names to name the activities in the data set
selectedData$activityid<-activityLabels[selectedData$activityid,2]
## step 5  Appropriately labels the data set with descriptive variable names.
names(selectedData)[2]<-"activity"
names(selectedData)<-gsub("Acc","Accelerometer",names(selectedData))
names(selectedData)<-gsub("Gyro","Gyroscope",names(selectedData))
names(selectedData)<-gsub("^t","Time",names(selectedData))
names(selectedData)<-gsub("Mag","Magnitude",names(selectedData))
names(selectedData)<-gsub("^f","Frequency",names(selectedData))
names(selectedData)<-gsub("BodyBody","Body",names(selectedData))
names(selectedData)<-gsub("tBody","TimeBody",names(selectedData))
names(selectedData)<-gsub("-mean\\(\\)","Mean",names(selectedData))
names(selectedData)<-gsub("-std\\(\\)","STD",names(selectedData))
names(selectedData)<-gsub("angle","Angle",names(selectedData))
names(selectedData)<-gsub("gravity","Gravity",names(selectedData))
write.table(selectedData,"./data/UCI HAR Dataset/tidydata.txt",row.names=F)
## Step 6 From the data set in step 4, creates a second, independent
## tidy data set with the average of each variable for each activity and each subject.
data2<-selectedData %>%
group_by(subjectid,activity) %>%
summarize_all(list(mean=mean))
write.table(data2,"./data/UCI HAR Dataset/seconddata.txt",row.names=F)
write.table(data2,"./data/UCI HAR Dataset/seconddata.txt",row.names=F,quote=F)
write.table(data2,"./data/UCI HAR Dataset/seconddata.txt",row.names=F,quote=F)
write.table(data2,"./data/UCI HAR Dataset/seconddata.txt",row.names=F,quote=F)
?file.path
read.table
?read.table
?factor
library(tidyr)
setwd("C:/Users/wuyij/OneDrive/Desktop/John Hopkings Data Science Class/reproducible research/week2/assignment/RepData_PeerAssessment1")
if (!file.exists("./data")){dir.create("./data")}
unzip("./activity.zip",exdir="./data")
activity<-read.csv('./data/activity.csv')
View(activity)
summary(activity)
# Transform the date into date format
activity$date<-as.Date(activity$date,format="%Y-%m-%d")
View(activity)
summary(activity)
str(activity)
View(activity)
View(activity)
knitr::opts_chunk$set(echo = TRUE)
TotalStepPerDay<-aggregate(steps ~ date, data=activity, FUN= function(x) {sum(x,na.rm=TRUE)})
View(TotalStepPerDay)
View(TotalStepPerDay)
hist(TotalStepPerDay$steps)
hist(TotalStepPerDay$steps,
main="Histogram of Total Number of Steps Per Day",
x="Number of Steps Per Day")
hist(TotalStepPerDay$steps,
main="Histogram of Total Number of Steps Per Day",
xlab="Number of Steps Per Day")
MeanStepsPerDay<-mean(TotalStepPerDay$steps)
MedianStepsPerDay<-median(TotalStepPerDay$steps)
print(MeanStepsPerDay);print(MedianStepsPerDay)
View(activity)
summary(activity)
View(activity)
# Transform interval from numeric to factor
activity$interval<-factor(activity$interval)
str(activity)
library(dplyr)
activity %>%
group_by(interval)
activity %>%
group_by(interval) %>%
summarise(AverageStepsPerInterval=mean(steps,na.rm = TRUE))
View(activity)
summary(activity)
library(ggplot2)
activity2<-activity %>%
group_by(interval) %>%
summarise(AverageStepsPerInterval=mean(steps,na.rm = TRUE))
activity2
#
ggplot(data=activity2,aes(x=interval,y=AverageStepsPerInterval))+
geom_line()+
ggtitle("Average Daily Activity Pattern")+
xlab("5-minute interval")+
ylab("average number of steps taken across all days")
ggplot(data=activity2,aes(x=interval,y=AverageStepsPerInterval))+
geom_point()+
ggtitle("Average Daily Activity Pattern")+
xlab("5-minute interval")+
ylab("average number of steps taken across all days")
#
ggplot(data=activity2,aes(x=interval,y=AverageStepsPerInterval))+
geom_point()+
geom_smooth()+
ggtitle("Average Daily Activity Pattern")+
xlab("5-minute interval")+
ylab("average number of steps taken across all days")
#
ggplot(data=activity2,aes(x=interval,y=AverageStepsPerInterval))+
geom_line()+
ggtitle("Average Daily Activity Pattern")+
xlab("5-minute interval")+
ylab("average number of steps taken across all days")
str(activity2)
activity2$interval<-as.numeric(activity2$interval)
ggplot(data=activity2,aes(x=interval,y=AverageStepsPerInterval))+
geom_line()+
ggtitle("Average Daily Activity Pattern")+
xlab("5-minute interval")+
ylab("average number of steps taken across all days")
activity2
#
plot(x=activity2$interval,y=activity2$AverageStepsPerInterval,
type="l")
#
plot(x=activity2$interval,y=activity2$AverageStepsPerInterval,
type="l",
main="Average Daily Activity Pattern",
xlab="5-minute interval",
ylab="average number of steps taken across all days")
levels(activity2$interval)
activity2<-activity %>%
group_by(interval) %>%
summarise(AverageStepsPerInterval=mean(steps,na.rm = TRUE))
levels(activity2$interval)
class(levels(activity2$interval)
class(levels(activity2$interval))
as.numeric(levels(activity2$interval))
activity2$interval<-as.numeric(levels(activity2$interval))
# Plot the time series plot
plot(x=activity2$interval,y=activity2$AverageStepsPerInterval,
type="l",
main="Average Daily Activity Pattern",
xlab="5-minute interval",
ylab="average number of steps taken across all days")
View(activity2)
View(activity2)
# Find the interval that contains the max average number of steps
activity2$interval[which(max(avtivity2$AverageStepsPerInterval))]
# Find the interval that contains the max average number of steps
activity2$interval[which(max(activity2$AverageStepsPerInterval))]
# Find the interval that contains the max average number of steps
activity2$interval[which.max(activity2$AverageStepsPerInterval)]
# Calculate the number of missing values in the dataset
sum(is.na(activity))
View(activity)
View(activity)
is.na(activity$steps)
activity$interval[is.na(activity$steps)]
View(activity2)
View(activity)
View(activity)
# Replace all the missing value with the average steps taken for the 5-minute interval the missing value is in
activity.imputed<-activity %>%
mutate(steps=replace(steps,
list= is.na(steps),
values= ave(steps,
interval,
FUN = function(x) mean(x, na.rm =TRUE))))
ave(steps,
interval,
FUN = function(x) mean(x, na.rm =TRUE))
View(activity)
str(activity)
ave(activity$steps,
activity$interval,
FUN = function(x) mean(x, na.rm =TRUE))
values= ave(activity$steps,
activity$interval,
FUN = function(x) mean(x, na.rm =TRUE))
activity.imputed<-activity %>%
mutate(steps=replace(steps,
list= is.na(steps),
values= ave(activity$steps,
activity$interval,
FUN = function(x) mean(x, na.rm =TRUE))))
ifelse(is.na(activity$steps),
ave(activity$steps,
activity$interval,
FUN = function(x) mean(x, na.rm =TRUE)),
activity$steps)
View(activity)
# Replace all the missing value with the average steps taken for the 5-minute interval the missing value is in
steps.imputed<-ifelse(is.na(activity$steps),
ave(activity$steps,
activity$interval,
FUN = function(x) mean(x, na.rm =TRUE)),
activity$steps)
activity.imputed<-activity %>%
mutate(steps=steps.imputed)
View(activity.imputed)
# Plot the time series plot
plot(x=activity2$interval,y=activity2$AverageStepsPerInterval,
type="l",
main="Average Daily Activity Pattern",
xlab="5-minute interval",
ylab="average number of steps taken across all days")
View(activity2)
View(activity.imputed)
# Make a histogram of the total number of steps taken each day
activity.imputed$TotalStepsPerDay<-aggregate(steps ~ date,
data=activity.imputed,
FUN=sum)
# Make a histogram of the total number of steps taken each day
TotalStepsPerDay.imputed<-aggregate(steps ~ date,
data=activity.imputed,
FUN=sum)
hist(TotalStepsPerDay.imputed,
main="Histogram of Total Number of Steps Taken Each Day After Imputation",
xlab="Total Steps Taken Per Day")
View(TotalStepsPerDay.imputed)
hist(TotalStepsPerDay.imputed$steps,
main="Histogram of Total Number of Steps Taken Each Day After Imputation",
xlab="Total Steps Taken Per Day")
mean(TotalStepsPerDay.imputed$steps)
print(MeanStepsPerDay.imputed)
MeanStepsPerDay.imputed<-mean(TotalStepsPerDay.imputed$steps)
print(MeanStepsPerDay.imputed)
MedianStepsPerDay.imputed<-median(TotalStepsPerDay.imputed$steps)
print(MedianStepsPerDay.imputed)
hist(TotalStepsPerDay.imputed$steps,
main="Histogram of Total Number of Steps Taken Each Day After Imputation",
xlab="Total Steps Taken Per Day")
# Make a histogram of total number of stemps taken per day
hist(TotalStepPerDay$steps,
main="Histogram of Total Number of Steps Per Day",
xlab="Number of Steps Per Day")
View(activity2)
weekdays(activity.imputed$date)
activity.imputed$daytype<-
daytype<-weekdays(activity.imputed$date)
activity.imputed$daytype<-
daytype<-weekdays(activity.imputed$date,TRUE)
daytype
tail(daytype)
summary(daytype)
str(daytype)
activity.imputed$daytype<-weekdays(activity.imputed$date,TRUE)
View(activity.imputed)
factor(daytype,
levels=c("Mon","Tue","Wed","Thu","Fri","Sat","Sun"),
labels = c("weekday","weekday","weekday","weekday","weekday","weekend","weekend"))
daytype<-factor(daytype,
levels=c("Mon","Tue","Wed","Thu","Fri","Sat","Sun"),
labels = c("weekday","weekday","weekday","weekday","weekday","weekend","weekend"))
daytype
levelss(daytype)
levels(daytype)
unclass(daytype)
str(daytype)
activity.imputed$daytype<-daytype
View(activity.imputed)
View(activity.imputed)
View(activity.imputed)
View(activity.imputed)
View(activity.imputed)
View(activity.imputed)
# Create a dataset that summarize the average steps taken for each 5-minute interval across all weekday days and all weekend days.
activity.imputed2<-activity.imputed %>%
group_by(interval,daytype) %>%
summarise(MeanSteps.Int.Dty=mean(steps))
View(activity.imputed2)
View(activity.imputed2)
View(activity.imputed2)
View(activity.imputed2)
View(activity.imputed2)
levels(activity.imputed2$interval)
View(activity.imputed2)
unclass(activity.imputed2$interval)
View(activity2)
as.numeric(as.character(activity.imputed2$interval))
activity.imputed2$interval<-as.numeric(as.character(activity.imputed2$interval))
View(activity.imputed2)
ggplot(data=activity.imputed2,
aes(x=interval,y=MeanSteps.Int.Dty))+
facet_grid(.~ daytype)+
geom_line()+
xlab("Interval")+
ylab("Average Number of Steps Taken")+
ggtitle("e")
activity.imputed2$interval<-as.numeric(as.character(activity.imputed2$interval))
ggplot(data=activity.imputed2,
aes(x=interval,y=MeanSteps.Int.Dty))+
facet_grid(.~ daytype)+
geom_line()+
xlab("Interval")+
ylab("Average Number of Steps Taken")+
ggtitle("e")
ggplot(data=activity.imputed2,
aes(x=interval,y=MeanSteps.Int.Dty))+
facet_grid(.~ daytype)+
geom_line()+
xlab("Interval")+
ylab("Average Number of Steps Taken")+
ggtitle("Activity Patterns between Weekdays and Weekends")
knitr::opts_chunk$set(echo = TRUE)
# Calculate the total number of steps taken per day ignoring missing values
TotalStepPerDay<-aggregate(steps ~ date, data=activity, FUN= function(x) {sum(x,na.rm=TRUE)})
knitr::opts_chunk$set(echo = TRUE)
# Unzip and load the activity dataset
if (!file.exists("./data")){dir.create("./data")}
unzip("./activity.zip",exdir="./data")
activity<-read.csv('./data/activity.csv')
summary(activity)
str(activity)
# Transform the date into date format
activity$date<-as.Date(activity$date,format="%Y-%m-%d")
# Transform interval from numeric to factor
activity$interval<-factor(activity$interval)
# Calculate the total number of steps taken per day ignoring missing values
TotalStepPerDay<-aggregate(steps ~ date, data=activity, FUN= function(x) {sum(x,na.rm=TRUE)})
View(TotalStepPerDay)
View(TotalStepPerDay)
